import numpy as np
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import scipy.optimize as optimization
from yfinance import download

stocks = ['AAPL','WMT','TSLA','GE','AMZN','DB']
num_portfolios = 10000


start_date = '2010-01-01'
end_date = '2017-01-01'
def download_stock_data():
    stock_data = {}
    for stock in stocks:
        ticker = yf.Ticker(stock)
        stock_data[stock] = ticker.history(start = start_date, end= end_date)['Close']

    return pd.DataFrame(stock_data)

def show_data(data):
    data.plot(fig = (10,5))
    plt.show()


def calculate_return(data):
    log_return = np.log(data/data.shift(1))
    return log_return[1:]

def show_statistics(returns):
    print(returns.mean()*252)
    print(returns.cov() * 252)


def show_mean_variance(returns,weights):
    portfolio_return = np.sum(returns.mean()*weights) * 252
    portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(returns.cov() *252,weights)))
    print(f'Expected portfolio return is {portfolio_return}')
    print(f'Expected portfolio volatility is {portfolio_volatility}')

def show_portfolios(returns,volatilities):
    plt.figure(figsize = (10,3))
    plt.scatter( volatilities,returns, c=returns/volatilities, marker = 'o')
    plt.grid(True)
    plt.xlabel('Volatility')
    plt.ylabel('Returns')
    plt.colorbar(label = 'Sharpe Ratio')
    plt.show

def generate_portfolio(returns):
    portfolio_means = []
    portfolio_risks = []
    portfolio_weights = []

    for _ in range(num_portfolios):
        w = np.random.random(len(stocks))
        w /= np.sum(w)
        portfolio_weights.append(w)
        portfolio_means.append(np.sum(returns.mean()*w)*252)
        portfolio_risks.append(np.sqrt(np.dot(w.T, np.dot(returns.cov() *252,w)))
    return np.array(portfolio_weights), np.array(portfolio_means), np.array(portfolio_risks)

def statistics(weights, returns):
    portfolio_return = np.sum(returns.mean()*weights) * 252
    portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(returns.cov() *252,weights)))

    return np.array([portfolio_return,portfolio_volatility, portfolio_return/portfolio_volatility]))

def min_function_sharpe(weights,returns):
    return -statistics(weights, returns)[2]

def optimise_returns(weights, returns):
    constraints = {'type':'eq', lambda x: np.sum(x)-1}
    bounds = tuple((0,1) for _ in range(len(stocks)))
    return optimization.minimize(fun = min_function_sharpe, x0 = weights[0], args = returns, method ='SLSQP',bounds = bounds, constraints=constraints )

def print_optimal_portfolio(optimum, returns):
    print(f'Optimal portfolio: '. optimum['x'].round(3))
    print(f'Expected return, volatility and sharpe ratio: '.optimum['x'].round(3))

if __name__ =='__main__':
    dataset = download_stock_data()
    daily_return = calculate_return(dataset)
    res = show_statistics(daily_return)

    pweights, means, risks = generate_portfolio(returns)
    show_portfolios(means, risks)
